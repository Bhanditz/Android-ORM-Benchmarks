package ds.dbtests.db.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ds.dbtests.db.User;

import ds.dbtests.db.greendao.OrderGreenDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_GREEN_DAO".
*/
public class OrderGreenDaoDao extends AbstractDao<OrderGreenDao, Long> {

    public static final String TABLENAME = "ORDER_GREEN_DAO";

    /**
     * Properties of entity OrderGreenDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Price = new Property(2, double.class, "price", false, "PRICE");
        public final static Property Count = new Property(3, int.class, "count", false, "COUNT");
        public final static Property Created = new Property(4, java.util.Date.class, "created", false, "CREATED");
        public final static Property Expiration = new Property(5, java.util.Date.class, "expiration", false, "EXPIRATION");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property UserId = new Property(7, long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<OrderGreenDao> userGreenDao_OrderGreenDaoListQuery;

    public OrderGreenDaoDao(DaoConfig config) {
        super(config);
    }
    
    public OrderGreenDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_GREEN_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"PRICE\" REAL NOT NULL ," + // 2: price
                "\"COUNT\" INTEGER NOT NULL ," + // 3: count
                "\"CREATED\" INTEGER NOT NULL ," + // 4: created
                "\"EXPIRATION\" INTEGER NOT NULL ," + // 5: expiration
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 6: description
                "\"USER_ID\" INTEGER NOT NULL );"); // 7: userId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ORDER_GREEN_DAO_USER_ID ON ORDER_GREEN_DAO" +
                " (\"USER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_GREEN_DAO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderGreenDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindDouble(3, entity.getPrice());
        stmt.bindLong(4, entity.getCount());
        stmt.bindLong(5, entity.getCreated().getTime());
        stmt.bindLong(6, entity.getExpiration().getTime());
        stmt.bindString(7, entity.getDescription());
        stmt.bindLong(8, entity.getUserId());
    }

    @Override
    protected void attachEntity(OrderGreenDao entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderGreenDao readEntity(Cursor cursor, int offset) {
        OrderGreenDao entity = new OrderGreenDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getDouble(offset + 2), // price
            cursor.getInt(offset + 3), // count
            new java.util.Date(cursor.getLong(offset + 4)), // created
            new java.util.Date(cursor.getLong(offset + 5)), // expiration
            cursor.getString(offset + 6), // description
            cursor.getLong(offset + 7) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderGreenDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.getDouble(offset + 2));
        entity.setCount(cursor.getInt(offset + 3));
        entity.setCreated(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setExpiration(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDescription(cursor.getString(offset + 6));
        entity.setUserId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderGreenDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderGreenDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orderGreenDaoList" to-many relationship of UserGreenDao. */
    public List<OrderGreenDao> _queryUserGreenDao_OrderGreenDaoList(long userId) {
        synchronized (this) {
            if (userGreenDao_OrderGreenDaoListQuery == null) {
                QueryBuilder<OrderGreenDao> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                userGreenDao_OrderGreenDaoListQuery = queryBuilder.build();
            }
        }
        Query<OrderGreenDao> query = userGreenDao_OrderGreenDaoListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserGreenDaoDao().getAllColumns());
            builder.append(" FROM ORDER_GREEN_DAO T");
            builder.append(" LEFT JOIN USER_GREEN_DAO T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OrderGreenDao loadCurrentDeep(Cursor cursor, boolean lock) {
        OrderGreenDao entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserGreenDao user = loadCurrentOther(daoSession.getUserGreenDaoDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public OrderGreenDao loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OrderGreenDao> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OrderGreenDao> list = new ArrayList<OrderGreenDao>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OrderGreenDao> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OrderGreenDao> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
