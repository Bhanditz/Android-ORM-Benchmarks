package ds.dbtests.db.greendao;

import java.util.List;
import ds.dbtests.db.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

import ds.dbtests.db.Order;
import java.io.*;
import java.util.*;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "USER_GREEN_DAO".
 */
public class UserGreenDao implements java.io.Serializable, ds.dbtests.db.User {

    private Long id;
    private int age;
    private double height;
    private String name;
    private String login;
    private String password;
    private String sex;
    private String description;
    private String phone;
    private java.util.List<OrderGreenDao> rawOrders;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserGreenDaoDao myDao;

    private List<OrderGreenDao> orderGreenDaoList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public UserGreenDao() {
    }

    public UserGreenDao(Long id) {
        this.id = id;
    }

    public UserGreenDao(Long id, int age, double height, String name, String login, String password, String sex, String description, String phone, java.util.List<OrderGreenDao> rawOrders) {
        this.id = id;
        this.age = age;
        this.height = height;
        this.name = name;
        this.login = login;
        this.password = password;
        this.sex = sex;
        this.description = description;
        this.phone = phone;
        this.rawOrders = rawOrders;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserGreenDaoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public double getHeight() {
        return height;
    }

    public void setHeight(double height) {
        this.height = height;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public java.util.List<OrderGreenDao> getRawOrders() {
        return rawOrders;
    }

    public void setRawOrders(java.util.List<OrderGreenDao> rawOrders) {
        this.rawOrders = rawOrders;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OrderGreenDao> getOrderGreenDaoList() {
        if (orderGreenDaoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderGreenDaoDao targetDao = daoSession.getOrderGreenDaoDao();
            List<OrderGreenDao> orderGreenDaoListNew = targetDao._queryUserGreenDao_OrderGreenDaoList(id);
            synchronized (this) {
                if(orderGreenDaoList == null) {
                    orderGreenDaoList = orderGreenDaoListNew;
                }
            }
        }
        return orderGreenDaoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrderGreenDaoList() {
        orderGreenDaoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public List<Order> getOrders() {
		return (List<Order>) (Object) getOrderGreenDaoList();
	}


	@Override
	public void setOrders(final Collection<? extends Order> list) {
		orderGreenDaoList = (List<OrderGreenDao>) list;
	}

/*
	public ArrayList<OrderGreenDao> getOrdersRaw() {
		Kryo kryo = kryos.get();
		Input input = new Input(new ByteArrayInputStream(rawOrders));
        ArrayList<OrderGreenDao> list = (ArrayList<OrderGreenDao>) kryo.readClassAndObject(input);
		input.close();
        //Log.v("#","read kryo size="+list.size());
		return list;
	}


	public void setOrdersRaw(ArrayList<OrderGreenDao> list) {
		Kryo kryo = kryos.get();
		Output output = new Output(new ByteArrayOutputStream());
		kryo.writeClassAndObject(output, list);
		rawOrders = output.toBytes();
		output.close();
	}*/

   /* public ArrayList<OrderGreenDao> getOrdersRaw() {
        ArrayList<OrderGreenDao> list = (ArrayList<OrderGreenDao>) Fst.INSTANCE$.deserialize(rawOrders);
        return list;
    }


    public void setOrdersRaw(ArrayList<OrderGreenDao> list) {
        rawOrders = Fst.INSTANCE$.serialize(list);
    }*/
    // KEEP METHODS END

}
