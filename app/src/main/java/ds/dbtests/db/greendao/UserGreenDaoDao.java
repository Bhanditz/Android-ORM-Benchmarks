package ds.dbtests.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ds.dbtests.db.Order;
import java.io.*;
import java.util.*;

import ds.dbtests.db.greendao.UserGreenDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_GREEN_DAO".
*/
public class UserGreenDaoDao extends AbstractDao<UserGreenDao, Long> {

    public static final String TABLENAME = "USER_GREEN_DAO";

    /**
     * Properties of entity UserGreenDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Age = new Property(1, int.class, "age", false, "AGE");
        public final static Property Height = new Property(2, double.class, "height", false, "HEIGHT");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Login = new Property(4, String.class, "login", false, "LOGIN");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property RawOrders = new Property(9, byte[].class, "rawOrders", false, "RAW_ORDERS");
    };

    private DaoSession daoSession;

    private final OrderSerializer rawOrdersConverter = new OrderSerializer();

    public UserGreenDaoDao(DaoConfig config) {
        super(config);
    }
    
    public UserGreenDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_GREEN_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AGE\" INTEGER NOT NULL ," + // 1: age
                "\"HEIGHT\" REAL NOT NULL ," + // 2: height
                "\"NAME\" TEXT," + // 3: name
                "\"LOGIN\" TEXT," + // 4: login
                "\"PASSWORD\" TEXT," + // 5: password
                "\"SEX\" TEXT," + // 6: sex
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"PHONE\" TEXT," + // 8: phone
                "\"RAW_ORDERS\" BLOB);"); // 9: rawOrders
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_GREEN_DAO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserGreenDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAge());
        stmt.bindDouble(3, entity.getHeight());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(5, login);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        java.util.List<OrderGreenDao> rawOrders = entity.getRawOrders();
        if (rawOrders != null) {
            stmt.bindBlob(10, rawOrdersConverter.convertToDatabaseValue(rawOrders));
        }
    }

    @Override
    protected void attachEntity(UserGreenDao entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserGreenDao readEntity(Cursor cursor, int offset) {
        UserGreenDao entity = new UserGreenDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // age
            cursor.getDouble(offset + 2), // height
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // login
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // password
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : rawOrdersConverter.convertToEntityProperty(cursor.getBlob(offset + 9)) // rawOrders
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserGreenDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAge(cursor.getInt(offset + 1));
        entity.setHeight(cursor.getDouble(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRawOrders(cursor.isNull(offset + 9) ? null : rawOrdersConverter.convertToEntityProperty(cursor.getBlob(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserGreenDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserGreenDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
