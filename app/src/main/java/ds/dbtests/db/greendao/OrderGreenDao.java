package ds.dbtests.db.greendao;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.Index;
import org.greenrobot.greendao.annotation.NotNull;
import org.greenrobot.greendao.annotation.ToOne;

import ds.dbtests.db.User;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ORDER_GREEN_DAO".
 */
@Entity(active = true)
public class OrderGreenDao implements /*java.io.Serializable,*/ ds.dbtests.db.Order {

    @Id(autoincrement = true)
    private Long id;
    private String title;
    private double price;
    private int count;

    @NotNull
    private java.util.Date created;

    @NotNull
    private java.util.Date expiration;

    @NotNull
    private String description;

    @Index
    private long userId;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 1417876764)
    private transient OrderGreenDaoDao myDao;
    @ToOne(joinProperty = "userId")
    private UserGreenDao user;

    @Generated(hash = 251390918)
    private transient Long user__resolvedKey;

    

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 1805740375)
    public OrderGreenDao() {
    }

    public OrderGreenDao(Long id) {
        this.id = id;
    }

    @Generated(hash = 1769523073)
    public OrderGreenDao(Long id, String title, double price, int count, @NotNull java.util.Date created, @NotNull java.util.Date expiration,
            @NotNull String description, long userId) {
        this.id = id;
        this.title = title;
        this.price = price;
        this.count = count;
        this.created = created;
        this.expiration = expiration;
        this.description = description;
        this.userId = userId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    @NotNull
    public java.util.Date getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(@NotNull java.util.Date created) {
        this.created = created;
    }

    @NotNull
    public java.util.Date getExpiration() {
        return expiration;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setExpiration(@NotNull java.util.Date expiration) {
        this.expiration = expiration;
    }

    @NotNull
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(@NotNull String description) {
        this.description = description;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 462796126)
    public UserGreenDao getUser() {
        long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserGreenDaoDao targetDao = daoSession.getUserGreenDaoDao();
            UserGreenDao userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
                user__resolvedKey = __key;
            }
        }
        return user;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 355604469)
    public void setUser(@NotNull UserGreenDao user) {
        if (user == null) {
            throw new DaoException("To-one property 'userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            userId = user.getId();
            user__resolvedKey = userId;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public void setUser(final User user) {
		setUser((UserGreenDao) user);
	}
    // KEEP METHODS END

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 453244264)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderGreenDaoDao() : null;
    }

}
