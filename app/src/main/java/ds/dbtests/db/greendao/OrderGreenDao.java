package ds.dbtests.db.greendao;

import ds.dbtests.db.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

import ds.dbtests.db.User;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ORDER_GREEN_DAO".
 */
public class OrderGreenDao implements java.io.Serializable, ds.dbtests.db.Order {

    private Long id;
    private String title;
    private double price;
    private int count;
    /** Not-null value. */
    private java.util.Date created;
    /** Not-null value. */
    private java.util.Date expiration;
    /** Not-null value. */
    private String description;
    private long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrderGreenDaoDao myDao;

    private UserGreenDao user;
    private Long user__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OrderGreenDao() {
    }

    public OrderGreenDao(Long id) {
        this.id = id;
    }

    public OrderGreenDao(Long id, String title, double price, int count, java.util.Date created, java.util.Date expiration, String description, long userId) {
        this.id = id;
        this.title = title;
        this.price = price;
        this.count = count;
        this.created = created;
        this.expiration = expiration;
        this.description = description;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderGreenDaoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    /** Not-null value. */
    public java.util.Date getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    /** Not-null value. */
    public java.util.Date getExpiration() {
        return expiration;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setExpiration(java.util.Date expiration) {
        this.expiration = expiration;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    public UserGreenDao getUser() {
        long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserGreenDaoDao targetDao = daoSession.getUserGreenDaoDao();
            UserGreenDao userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(UserGreenDao user) {
        if (user == null) {
            throw new DaoException("To-one property 'userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            userId = user.getId();
            user__resolvedKey = userId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public void setUser(final User user) {
		setUser((UserGreenDao) user);
	}
    // KEEP METHODS END

}
